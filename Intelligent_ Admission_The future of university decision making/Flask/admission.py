# -*- coding: utf-8 -*-
"""admission.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VJqBhS1d4j5l0BVce9ikrOXEHLoIiQtg
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import warnings
warnings.filterwarnings('ignore')

plt.style.available

plt.style.use('fivethirtyeight')

df=pd.read_csv('/content/Admission_Predict.csv')
df.head()

df.info()

plt.figure(figsize=(12,5))
plt.subplot(121)
sns.distplot(df['University Rating'],color='r')
plt.subplot(122)
sns.distplot(df['SOP'], color='y')

#creating dummy dataframe for categorical
df_cat = df.select_dtypes(include='int64')
df_cat.head()

for i,j in enumerate(df_cat):
  print(j)
  print(i)

#visualizing counts in each variable
plt.figure(figsize=(18,4))
for i,j in enumerate(df_cat):
  plt.subplot(1,5,i+1)
  sns.countplot(df[j])

plt.figure(figsize=(18,5))
plt.subplot(131)
sns.countplot(x='SOP',data=df)
plt.subplot(132)
sns.countplot(x='University Rating',data=df)

df['TOEFL Score'].min()

df.shape

df['TOEFL Score_']=['92-95' if x<=95 else '95-105' if x>95 and x<=105 else '105+' for x in df['TOEFL Score']]

df.head()

# finding relation between TOEFL Score_ & SOP
sns.heatmap(pd.crosstab(df['TOEFL Score_'],df['SOP']))

df.drop('TOEFL Score_', axis=1, inplace=True)
df.head()

plt.figure(figsize=(30,8))
plt.subplot(111)
sns.countplot(data=df,x='University Rating',hue='TOEFL Score')

#multivariate analysis
plt.figure(figsize=(30,10))
sns.swarmplot(data=df, x='GRE Score',y='TOEFL Score',hue=df['University Rating'])

sns.heatmap(df.corr())

#descriptive analysis - descriptive stat
df.describe(include='all')

df.info()

# Data preprocessing

#finding the shape of data
df.shape

#finding the null value
df.isnull()

#simlify check null value
df.isnull().any()

#count of null values
df.isnull().sum()

df.dropna()

#finding the datatype
df.info()

#finding outliers
sns.boxenplot(df['SOP'], color='purple')

sns.boxenplot(df['University Rating'], color='b')

#finding the count of outliers
#IQR = q3-q1....., ub = q3+(1.5*IQR), lb = q1-(1.5*IQR)
q1 = np.quantile(df['University Rating'],0.25)
q3 = np.quantile(df['University Rating'],0.75)

print('Q1 = {}'.format(q1))
print('Q3 = {}'.format(q3))

IQR = q3-q1

print('IQR value is {}'.format(IQR))

upperBound = q3+(1.5*IQR)
lowerBound = q1-(1.5*IQR)

print('The upper bound value is{} & the lower bound value is {}'.format(upperBound,lowerBound))

print('skwed data :',len(df[df['University Rating']>upperBound]))

len(df[df['University Rating']>upperBound])

# Handling outliers

from scipy import stats

plt.figure(figsize=(19,4))
plt.subplot(131)
sns.distplot(df['SOP'])
plt.subplot(132)
stats.probplot(np.log((df['SOP'])),plot=plt)
plt.subplot(133)
sns.distplot(np.log(df['SOP']))

stats.probplot(np.log(df['SOP']),plot=plt)

#Transforming normal value to log value
df['SOP']=np.log(df['University Rating'])
df.head()

plt.scatter(df['University Rating'], df['SOP'])

y = df.iloc[:,5:1]
y.head()

x = df.iloc[:,0:1]
x.head()

from sklearn.model_selection import train_test_split

xtrain, xtest, ytrain, ytest = train_test_split(x,y,test_size=0.2,random_state=11)

print(xtrain.shape)
print(xtest.shape)

# Model building 
from sklearn.linear_model import LinearRegression

lr = LinearRegression

df['SOP'].unique()

from sklearn.preprocessing import LabelEncoder

le = LabelEncoder

x = df.iloc[:,0:4]
x.head()

from sklearn.model_selection import train_test_split

from IPython.utils import text
xtrain,xtest,ytrain,ytest = train_test_split(x,y,test_size=0.2,random_state=10)

print(xtrain)
print(xtest)

from sklearn.linear_model import LinearRegression

lr = LinearRegression

plt.scatter(df['GRE Score'], df['TOEFL Score'])

from sklearn.preprocessing import PolynomialFeatures
from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score

df.corr()

lr = LinearRegression()

from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, confusion_matrix

df.isnull().sum()

sns.boxplot(df['TOEFL Score'])

